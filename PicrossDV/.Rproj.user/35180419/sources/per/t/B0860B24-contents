library(shiny)
library(shinythemes)
library(bslib)
library(bsicons)
library(jsonlite)
library(shinyjs)


#' Fonction du serveur pour l'application Shiny Picross
#'
#' Cette fonction définit le comportement du serveur pour l'application Shiny Picross.
#' @param input Les valeurs des widgets d'entrée de l'application.
#' @param output Les sorties à afficher dans l'interface utilisateur.
#' @param session Une session Shiny.
#' @export
server <- function(input, output, session) {

  board <- reactiveVal(grille(taille_initiale))
  tentatives <- reactiveVal(0)

  observeEvent(input$go, {
    tentatives <- reactiveVal(0)
    board(grille(input$size))
    session$sendCustomMessage(type = "startTimer", message = list())

    grid <- board()
    taille <- input$size

    num_col <- lapply(1:taille, function(j) {
      label <- paste(compte_grp_col(grid, j), collapse = "<br>")
      div(HTML(label), style = paste0("text-align: center; white-space: pre-wrap; grid-column: ", j, ";"))
    })

    num_lin <- lapply(1:taille, function(i) {
      label <- paste(paste0(" ",compte_grp_lin(grid, i)," "), collapse = " ")
      div(HTML(label), style = "text-align: center;")
    })

    output$grid <- renderUI({
      div(
        style = "display: grid; grid-template-columns: repeat(auto-fit, minmax(40px, auto)) 1fr; grid-gap: 1px;",
        div(
          style = "display: grid; grid-template-rows: repeat(auto-fit, minmax(40px, auto)); grid-column: 2; justify-content: space-around;",
          do.call(tagList, num_col)
        ),
        div(
          style = "display: grid; grid-template-columns: repeat(auto-fit, minmax(40px, auto)) 1fr; grid-gap: 1px; grid-column: 1; grid-row: 2; align-items: center;",
          do.call(tagList, num_lin)
        ),
        div(
          id = "grid-container",
          style = paste0(
            "grid-column: 2; grid-row: 2; display: grid;",
            "grid-template-columns: repeat(", taille, ", 1fr);",
            "grid-template-rows: repeat(", taille, ", 1fr);",
            "grid-gap: 1px;"
          ),
          lapply(1:taille, function(i) {
            lapply(1:taille, function(j) {
              id <- paste0("cell_", i, "_", j)
              cell_value <- grid[i, j]
              style <- if ((cell_value == 1) || (cell_value == 0)) "background-color: white; border: 1px solid #333;" else ""
              actionButton(
                id,
                "",
                style = paste0(
                  "width: 100%;",
                  "height: 0;",
                  "padding-top: 100%;",
                  style
                ),
                class = "grid-cell"
              )
            })
          })
        )
      )
    })
  })

  instructions_state <- reactiveValues(show = FALSE)

  observeEvent(input$toggle_instructions, {
    instructions_state$show <- !instructions_state$show
  })

  output$instructions <- renderUI({
    if (instructions_state$show) {
      tagList(
        p("Cliquez sur les cases pour les remplir ou les vider en respectant les conditions."),
        p("Les nombres en haut de la grille indiquent le nombre de cases à noircir sur la colonne correspondante."),
        p("Les nombres à gauche de la grille indiquent le nombre de cases à noircir sur la ligne correspondante."),
        p("Essayez de résoudre le puzzle !")
      )
    }
  })

  observeEvent(input$verif, {
    tentatives(tentatives() + 1)
    grid<- board()
    # Appeler la fonction verif lorsque l'état des cellules est mis à jour
    verif_result <- verif(input$cell_states,grid)
    if (verif_result) {
      showModal(modalDialog(
        title = "Résultat de la vérification",
        HTML(paste("Le puzzle est correct ! <br> Nombre de tentatives: ", tentatives())),
        footer = tagList(
          actionButton("closeModal", "Super!")
        )
      ))
    } else {
      showModal(modalDialog(
        title = "Résultat de la vérification:",
        HTML(paste("Le puzzle contient des erreurs. <br> Nombre de tentatives: ", tentatives())),
        footer = tagList(
          actionButton("closeModal", "Continuer")
        )
      ))
    }
  })

  output$num_tentatives <- renderText({
    paste("Nombre de tentatives:", tentatives())
  })

  observeEvent(input$closeModal, {
    removeModal()
  })

}
